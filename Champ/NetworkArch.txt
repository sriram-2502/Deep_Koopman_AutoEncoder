desiredStates = ['lf_hip_joint_position', 'lf_hip_joint_vel', 'lf_hip_joint_effort']

input_dim = 3 | output_dim = 3
enc layers: 7
enc units [16,32,64,64,16,16,16], act:[tanh,elu,tanh,elu,tanh,elu,tanh]
Koopman Layer: 1 
Koopman units: 16, act: None
dec layers: 5
dec units [64,64,32,64,2], act: [elu,elu,tanh,tanh,None]

training paramters
epochs: 9,000
learning_rate: 0.0001

Loss: alpha1 = 1e-1, alpha2 = 1e-7, alpha3 = 1e-15


############################################################
desiredStates = ['lf_hip_joint_position', 'lf_hip_joint_vel', 'lf_hip_joint_effort']

input_dim = len(desiredStates)
output_dim = input_dim

trajLength = 2**5 # Length of each trajectory in the dataset

filePath = "simData"
#fileNames = [filePath + '/plane_kp_100e10_kd_0/joint_state_test_plane_kp_100e10_kd_0_forward_0.1*']
fileNames = [filePath + '/empty_world_ground/joint_state_test_forward_0.1*']


numTraj = 16 # Total number of trajectories in the dataset (train)
numTraj_val = 4
batch_size = int(2**7) # Number of snapshots in each batch
numTraj_batch = int(batch_size/trajLength)


initialIndex, finalIndex= 200, 200+trajLength*(numTraj+numTraj_val)

num_batches_train = int(trajLength*numTraj/batch_size) ## num_batches = trajLength*numTraj/batch_size 
num_batches_val = int(trajLength*numTraj_val/batch_size)
#############################################################

Data Preprocessing Params:
filePath = "simData"
fileNames = [filePath + '/plane_kp_100e10_kd_0/joint_state_test_plane_kp_100e10_kd_0_forward_0.1*']
initialIndex, finalIndex= 200, 200+trajLength*(numTraj+numTraj_val)

scaling for preprocess: 0 to 1

Results (Lin Pred):
-------------
1) test_traj_linPred_lf_hip_joint_effort
2) test_traj_linPred_lf_hip_joint_position